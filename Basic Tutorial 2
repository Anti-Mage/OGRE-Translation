基础教程第2课  --相机、光源和阴影
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

教程简介：
---------------------------------------------------------------------------------------------------------------------------------	在本教程中，我们将基于你所学的知识做一些拓展，介绍一些新的OGRE对象的创建。本教程主要处理光源对象并介绍如何使用官员产生阴影-
-它也会包含相机的一些基础的知识。																							  -
--------------------------------------------------------------------------------------------------------------------------------

前提条件
--------------------------------------------------------------------------------------------------------------------------------
	本教程认为你已经知道如何使用C++语言编程并且能够设置和编译Ogre程序。
  	本教程同样认为你已经使用Ogre Wiki Tutorial Framework、CMake或者Ogre Appwizard创建了一个工程。如果没有的话请看http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Setting+Up+An+Application吧。
  	本教程是在前面一个教程的基础上创建的，我们假设你已经完成了前面的教程。
  	
  	当你在学习本教程的时候你应该慢慢的向你的项目中添加代码，编译并观察添加的代码的效果。你也可以在这儿（http://www.ogre3d.org/tikiwiki/tiki-index.php?page=BasicTutorial2Source）看到本教程的最终代码。如果你的代码有问题，你应该比较你的代码和教程的最终代码。
  	

目录--------------------------------------------------------------------------------------------------------------------------
	--前提条件
	--开始
	--相机
		--Ogre相机
		--创建一个相机
	--视口
		--Ogre视口
		--创建视口
	--光线和阴影
		--Ogre支持的阴影类型
		--在OGRE中使用阴影
		--光源的类型
		--创建光源
	--你应该尝试的事情
		--不同的阴影类型
		--光源衰减
		--SceneManager::setAmbientLight
		--视口背景颜色
		--Camera::setFarClipDistance
		--平面
	总结
		--完整代码
		--下一步
---------------------------------------------------目录 结束-----------------------------------------------------------------

开始
—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
	像之前的教程一样，我们使用之前创建好的代码开始我们的教程。我们通过复制TutorialApplication文件并正确的重命名文件和类来创建一个BasicTutorial2类和头文件。后面我们使用复制和重命名前一个教程的文件的方法创建BasicTutorial3、4。不要忘了改变build target。
	我们将会想BasicTutorial2类中添加两个方法：createViewport和createCamera，这两个函数已经在BaseApplication中定义好了，但是在本教程中我们将看看相机和视口实际上是如何创建的。
	将createCamera和createViewports方法的声明添加到你的BasicTutorial2类头文件中：
	-----------------------------------------------------BasicTutorial2 Header-----------------------------------------------
	class BasicTutorial2 : public BaseApplication
	{
	public:
		BasicTutorial2(void);
		virtual ~BasicTutorial2(void);
 
	protected:
		virtual void createScene(void);
		virtual void createCamera(void);
		virtual void createViewports(void);
	};
	-------------------------------------------------------------------------------------------------------------------------
	将createCamera和createViewports方法的定义添加到你的BasicTutorial2类实现文件中：
	-------------------------------------------------------BasicTutorial2.cpp-----------------------------------------------
	//-------------------------------------------------------------------------------------
	BasicTutorial2::BasicTutorial2(void)
	{
	}
	 
	//-------------------------------------------------------------------------------------
	BasicTutorial2::~BasicTutorial2(void)
	{
	}
	 
	//-------------------------------------------------------------------------------------
	void BasicTutorial2::createCamera(void)
	{
	}
	 
	//-------------------------------------------------------------------------------------
	void BasicTutorial2::createViewports(void)
	{
	}
	 
	//-------------------------------------------------------------------------------------
	void BasicTutorial2::createScene(void)
	{
	}
	---------------------------------------------------end of BasicTutorial2.cpp---------------------------------------------
	这应该可以通过编译，在程序运行之前我们应该创建和初始化几个对象。
	
相机
—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
	Ogre 相机
	---------------------------------------------------------------------------------------------------------------------
		相机是用来观察我们创建的场景的。相机是一个特殊的对象，它在某中程度上有点像场景节点。相机对象有setPosition、yaw、roll和pitch等几个函数，并且你可以把相机附加到任何场景节点上。就像场景节点一样，相机的位置也是相对于其父节点的（尊重长辈是对的）。你可以简单的将相机当做场景节点来进行运动和旋转操作。
		关于OGRE相机，有一件事可能和你想象的不太一样，那就是在同一时间你只能使用一个相机。也就是说，我们不能为观察场景的一部分创建一个相机，观察另外一部分创建第二个相机，然后根据场景中我们想显示的部分来启用和禁用相机。为了完成这个，你应该创建一个相机持有者场景节点，这些场景节点简单的坐落在场景中并指向了相机可能想要观察的方向。当需要显示场景中的一部分的时候，简单的将相机附加到正确的场景节点上，在FrameListener教程中，我们会到这个技术。
		
	创建一个相机
	------------------------------------------------------------------------------------------------------------------------
		我们将重写BaseApplication中用来创建相机的默认方法。
		找到BasicTutorial2::createCamera成员函数。
		我们将要做的第一件事就是创建一个相机。
		因为相机需要绑定到它所在的场景管理器上，所以我们使用场景管理器去创建相机，添加下面这行代码去创建一个相机。
		void BasicTutorial2::createCamera(void)
		{
		    // create the camera
		    mCamera = mSceneMgr->createCamera("PlayerCam");
		}
		上面的代码创建了一个名为“PlayerCam”的相机。
		注意：如果你不想保存一个指针指向你创建的相机对象，你可以根据相机的名称使用场景管理器(SceneManager)的getCamera函数来得到相机对象。
		下面我们要做的是设定相机的位置和它的朝向。
		我们将会把物体放在原点周围，所以我们把相机放在Z轴正方向的一个合适的距离并且让相机朝向原点。在之前的代码后面添加下面的代码：
		// set its position, direction  
    	mCamera->setPosition(Ogre::Vector3(0,10,500));
    	mCamera->lookAt(Ogre::Vector3(0,0,0));
    	
    	lookAt函数是非常漂亮的，你可以让你的相机朝向任何位置而不是必须要经过旋转才能朝向你想要的位置，场景节点也有这个函数，这将使得在很多情况下我们设定实体的正确朝向更加容易。
    	最后，我们将设定近裁剪距离为5个单位。相机的裁剪距离指出了你可以看到物体多远或者多近的距离。设定近裁剪距离会使你在离实体很近的情况下更加容易在屏幕上see through实体。替代的是如此接近一个对象，它充满整个屏幕，除了它的一小部分你什么也看不见。你同样可以设定远裁剪距离，这将是渲染引擎停止渲染比给定值远的物体。如果你在屏幕上渲染距离非常远的大量物体，这主要可以用来增加帧率。
    	添加下面的代码设定近裁剪距离：
    	// set the near clip distance
    	mCamera->setNearClipDistance(5);
    	通过简单的调用 setFarClipDistance 来设置远裁剪距离（当你使用本教程将会用到的Stencil Shadows的时候不应该设定远裁剪距离）。
    	由于我们重写了createCamera函数，我们需要使用我们新创建的相机去构建一个OgreBites::SdkCameraMan（相机控制器）对象：
    	mCameraMan = new OgreBites::SdkCameraMan(mCamera);   // create a default camera controller
    	createCamera函数现在看起来应该像这样：
    	-----------------------------------------------createCamera--------------------------------------------------------
    	void BasicTutorial2::createCamera(void)
		{
		    // create the camera
		    mCamera = mSceneMgr->createCamera("PlayerCam");
		    // set its position, direction  
		    mCamera->setPosition(Ogre::Vector3(0,10,500));
		    mCamera->lookAt(Ogre::Vector3(0,0,0));
		    // set the near clip distance
		    mCamera->setNearClipDistance(5);
		 
		    mCameraMan = new OgreBites::SdkCameraMan(mCamera);   // create a default camera controller
		}
		-----------------------------------------------end of createCamera---------------------------------------------------
		
	视口
	—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
	Ogre 视口
	------------------------------------------------------------------------------------------------------------------------
		视口类的概念在你处理多个相机的时候会非常有用。我们之所以现在引入这个话题是因为它对你理解在渲染场景是OGRE如何决定使用哪个相机是非常重要的。在OGRE中同时运行多个场景管理器是可能的，它同样可能将屏幕分为多个区域并且让相机去渲染屏幕的不同的区域（想象一下控制台游戏中2个玩家的视角）。尽管它可以做这些事情，但是我们知道高阶教程才会介绍它。
		为了理解OGRE是如何渲染一个场景的，考虑一下OGRE三个对象的构建：相机（Camera）、场景管理器（SceneManager）和渲染窗口（RenderWindow）。其中渲染窗口我们还没有介绍，它是物体显示最基本的窗口。场景管理器创建相机观察场景，你必须告诉渲染窗口屏幕要显示的是哪个相机和窗口的那一部分需要渲染。你告诉渲染窗口让相机显示的区域就是视口。在OGRE大多数的情况下你只需要一个相机，使用整个渲染窗口来注册相机，这样我们就只有一个视口。
		在本教程中如何注册相机去创建视口，接着我们可以使用视口对象去设置渲染场景的背景颜色。
		
	创建一个视口
	-------------------------------------------------------------------------------------------------------------------------
		我们将会重写BaseApplication的视口创建函数，找到BasicTutorial2::createViewports成员函数。为了创建窗口，我们简单的调用渲染窗口的addViewport函数，使用我们使用的相机作为参数。BaseApplication类已经使用我们的渲染窗口填充了mWindow对象，因此添加下面这行代码就可以了：
		// Create one viewport, entire window
    	Ogre::Viewport* vp = mWindow->addViewport(mCamera);
		

