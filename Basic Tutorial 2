基础教程第2课  --相机、光源和阴影
————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

教程简介：
---------------------------------------------------------------------------------------------------------------------------------	在本教程中，我们将基于你所学的知识做一些拓展，介绍一些新的OGRE对象的创建。本教程主要处理光源对象并介绍如何使用官员产生阴影-
-它也会包含相机的一些基础的知识。																							  -
--------------------------------------------------------------------------------------------------------------------------------

前提条件
--------------------------------------------------------------------------------------------------------------------------------
	本教程认为你已经知道如何使用C++语言编程并且能够设置和编译Ogre程序。
  	本教程同样认为你已经使用Ogre Wiki Tutorial Framework、CMake或者Ogre Appwizard创建了一个工程。如果没有的话请看http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Setting+Up+An+Application吧。
  	本教程是在前面一个教程的基础上创建的，我们假设你已经完成了前面的教程。
  	
  	当你在学习本教程的时候你应该慢慢的向你的项目中添加代码，编译并观察添加的代码的效果。你也可以在这儿（http://www.ogre3d.org/tikiwiki/tiki-index.php?page=BasicTutorial2Source）看到本教程的最终代码。如果你的代码有问题，你应该比较你的代码和教程的最终代码。
  	

目录--------------------------------------------------------------------------------------------------------------------------
	--前提条件
	--开始
	--相机
		--Ogre相机
		--创建一个相机
	--视口
		--Ogre视口
		--创建视口
	--光线和阴影
		--Ogre支持的阴影类型
		--在OGRE中使用阴影
		--光源的类型
		--创建光源
	--你应该尝试的事情
		--不同的阴影类型
		--光源衰减
		--SceneManager::setAmbientLight
		--视口背景颜色
		--Camera::setFarClipDistance
		--平面
	总结
		--完整代码
		--下一步
---------------------------------------------------目录 结束-----------------------------------------------------------------

开始
—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
	像之前的教程一样，我们使用之前创建好的代码开始我们的教程。我们通过复制TutorialApplication文件并正确的重命名文件和类来创建一个BasicTutorial2类和头文件。后面我们使用复制和重命名前一个教程的文件的方法创建BasicTutorial3、4。不要忘了改变build target。
	我们将会想BasicTutorial2类中添加两个方法：createViewport和createCamera，这两个函数已经在BaseApplication中定义好了，但是在本教程中我们将看看相机和视口实际上是如何创建的。
	将createCamera和createViewports方法的声明添加到你的BasicTutorial2类头文件中：
	-----------------------------------------------------BasicTutorial2 Header-----------------------------------------------
	class BasicTutorial2 : public BaseApplication
	{
	public:
		BasicTutorial2(void);
		virtual ~BasicTutorial2(void);
 
	protected:
		virtual void createScene(void);
		virtual void createCamera(void);
		virtual void createViewports(void);
	};
	-------------------------------------------------------------------------------------------------------------------------
	将createCamera和createViewports方法的定义添加到你的BasicTutorial2类实现文件中：
	-------------------------------------------------------BasicTutorial2.cpp-----------------------------------------------
	//-------------------------------------------------------------------------------------
	BasicTutorial2::BasicTutorial2(void)
	{
	}
	 
	//-------------------------------------------------------------------------------------
	BasicTutorial2::~BasicTutorial2(void)
	{
	}
	 
	//-------------------------------------------------------------------------------------
	void BasicTutorial2::createCamera(void)
	{
	}
	 
	//-------------------------------------------------------------------------------------
	void BasicTutorial2::createViewports(void)
	{
	}
	 
	//-------------------------------------------------------------------------------------
	void BasicTutorial2::createScene(void)
	{
	}
	---------------------------------------------------end of BasicTutorial2.cpp---------------------------------------------
	这应该可以通过编译，在程序运行之前我们应该创建和初始化几个对象。
	
相机
—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
	Ogre 相机
	---------------------------------------------------------------------------------------------------------------------
		相机是用来观察我们创建的场景的。相机是一个特殊的对象，它在某中程度上有点像场景节点。相机对象有setPosition、yaw、roll和pitch等几个函数，并且你可以把相机附加到任何场景节点上。就像场景节点一样，相机的位置也是相对于其父节点的（尊重长辈是对的）。你可以简单的将相机当做场景节点来进行运动和旋转操作。
		关于OGRE相机，有一件事可能和你想象的不太一样，那就是在同一时间你只能使用一个相机。也就是说，我们不能为观察场景的一部分创建一个相机，观察另外一部分创建第二个相机，然后根据场景中我们想显示的部分来启用和禁用相机。为了完成这个，你应该创建一个相机持有者场景节点，这些场景节点简单的坐落在场景中并指向了相机可能想要观察的方向。当需要显示场景中的一部分的时候，简单的将相机附加到正确的场景节点上，在FrameListener教程中，我们会到这个技术。
		
	创建一个相机
	------------------------------------------------------------------------------------------------------------------------
		我们将重写BaseApplication中用来创建相机的默认方法。
		找到BasicTutorial2::createCamera成员函数。
		我们将要做的第一件事就是创建一个相机。
		因为相机需要绑定到它所在的场景管理器上，所以我们使用场景管理器去创建相机，添加下面这行代码去创建一个相机。
		void BasicTutorial2::createCamera(void)
		{
		    // create the camera
		    mCamera = mSceneMgr->createCamera("PlayerCam");
		}
		上面的代码创建了一个名为“PlayerCam”的相机。
		注意：如果你不想保存一个指针指向你创建的相机对象，你可以根据相机的名称使用场景管理器(SceneManager)的getCamera函数来得到相机对象。
		下面我们要做的是设定相机的位置和它的朝向。
		我们将会把物体放在原点周围，所以我们把相机放在Z轴正方向的一个合适的距离并且让相机朝向原点。在之前的代码后面添加下面的代码：
		// set its position, direction  
    	mCamera->setPosition(Ogre::Vector3(0,10,500));
    	mCamera->lookAt(Ogre::Vector3(0,0,0));
    	
    	lookAt函数是非常漂亮的，你可以让你的相机朝向任何位置而不是必须要经过旋转才能朝向你想要的位置，场景节点也有这个函数，这将使得在很多情况下我们设定实体的正确朝向更加容易。
    	最后，我们将设定近裁剪距离为5个单位。相机的裁剪距离指出了你可以看到物体多远或者多近的距离。设定近裁剪距离会使你在离实体很近的情况下更加容易在屏幕上see through实体。替代的是如此接近一个对象，它充满整个屏幕，除了它的一小部分你什么也看不见。你同样可以设定远裁剪距离，这将是渲染引擎停止渲染比给定值远的物体。如果你在屏幕上渲染距离非常远的大量物体，这主要可以用来增加帧率。
    	添加下面的代码设定近裁剪距离：
    	// set the near clip distance
    	mCamera->setNearClipDistance(5);
    	通过简单的调用 setFarClipDistance 来设置远裁剪距离（当你使用本教程将会用到的Stencil Shadows的时候不应该设定远裁剪距离）。
    	由于我们重写了createCamera函数，我们需要使用我们新创建的相机去构建一个OgreBites::SdkCameraMan（相机控制器）对象：
    	mCameraMan = new OgreBites::SdkCameraMan(mCamera);   // create a default camera controller
    	createCamera函数现在看起来应该像这样：
    	-----------------------------------------------createCamera--------------------------------------------------------
    	void BasicTutorial2::createCamera(void)
		{
		    // create the camera
		    mCamera = mSceneMgr->createCamera("PlayerCam");
		    // set its position, direction  
		    mCamera->setPosition(Ogre::Vector3(0,10,500));
		    mCamera->lookAt(Ogre::Vector3(0,0,0));
		    // set the near clip distance
		    mCamera->setNearClipDistance(5);
		 
		    mCameraMan = new OgreBites::SdkCameraMan(mCamera);   // create a default camera controller
		}
		-----------------------------------------------end of createCamera---------------------------------------------------
		
	视口
	—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
	Ogre 视口
	------------------------------------------------------------------------------------------------------------------------
		视口类的概念在你处理多个相机的时候会非常有用。我们之所以现在引入这个话题是因为它对你理解在渲染场景是OGRE如何决定使用哪个相机是非常重要的。在OGRE中同时运行多个场景管理器是可能的，它同样可能将屏幕分为多个区域并且让相机去渲染屏幕的不同的区域（想象一下控制台游戏中2个玩家的视角）。尽管它可以做这些事情，但是我们知道高阶教程才会介绍它。
		为了理解OGRE是如何渲染一个场景的，考虑一下OGRE三个对象的构建：相机（Camera）、场景管理器（SceneManager）和渲染窗口（RenderWindow）。其中渲染窗口我们还没有介绍，它是物体显示最基本的窗口。场景管理器创建相机观察场景，你必须告诉渲染窗口屏幕要显示的是哪个相机和窗口的那一部分需要渲染。你告诉渲染窗口让相机显示的区域就是视口。在OGRE大多数的情况下你只需要一个相机，使用整个渲染窗口来注册相机，这样我们就只有一个视口。
		在本教程中如何注册相机去创建视口，接着我们可以使用视口对象去设置渲染场景的背景颜色。
		
	创建一个视口
	-------------------------------------------------------------------------------------------------------------------------
		我们将会重写BaseApplication的视口创建函数，找到BasicTutorial2::createViewports成员函数。为了创建窗口，我们简单的调用渲染窗口的addViewport函数，使用我们使用的相机作为参数。BaseApplication类已经使用我们的渲染窗口填充了mWindow对象，因此添加下面这行代码就可以了：
		// Create one viewport, entire window
    	Ogre::Viewport* vp = mWindow->addViewport(mCamera);
		既然我们已经创建好了视口，我们可以用它在做什么呢？答案是：可以做的不太多。我们可以用它来做的最重要的事情是调用setBackgroundColour函数用我们选择的函数在设定背景颜色。因为本教程中我们在处理光线，所以我们需要把背景颜色设为黑色：
		vp->setBackgroundColour(Ogre::ColourValue(0,0,0));
		注意：ColourValue需要红、绿和蓝三个值作为颜色参数，它们的值都在0-1之间。我们需要做的最后也是最重要的意见事就是设定相机的纵横比。如果你使用其他的一些视口而不是标准的全屏 窗口视口而没有设定正确的纵横比，那么场景可能会看起来非常奇怪。我们将继续并设定它，尽管我们使用的是默认的纵横比：
		// Alter the camera aspect ratio to match the viewport
		mCamera->setAspectRatio(Ogre::Real(vp->getActualWidth()) / Ogre::Real(vp->getActualHeight()));
		这就是我们需要为使用简单的视口类需要做的全部事情。
		
		已经完成了的createViewports函数看起来应该是下面这个样子的：
		void BasicTutorial2::createViewports(void)
		{
		    // Create one viewport, entire window
		    Ogre::Viewport* vp = mWindow->addViewport(mCamera);
		    vp->setBackgroundColour(Ogre::ColourValue(0,0,0));
		    // Alter the camera aspect ratio to match the viewport
		    mCamera->setAspectRatio(Ogre::Real(vp->getActualWidth()) / Ogre::Real(vp->getActualHeight()));    
		}
		
		现在你应该可以编译和运行你的程序，尽管除了一个空的场景什么都没有（按ESC键退出）。在继续下面的操作之前请运行你的程序并确保没有崩溃。
		
	
	光照和阴影
	—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
	OGRE支持的阴影类型
	-------------------------------------------------------------------------------------------------------------------------
	OGRE当前支持三种类型的阴影：
		1、调制纹理阴影（Modulative Texture Shadows）（Ogre::SHADOWTYPE_TEXTURE_MODULATIVE）-三种阴影中计算量最小的。它创建了一个黑白的渲染到纹理上的阴影投射，然后应用到场景中。
		2、调制模板阴影（Modulative Stencil Shadows）（Ogre::SHADOWTYPE_STENCIL_MODULATIVE）-这个技术将所有的阴影作为一个调幅度当所有的非透明的物体渲染到场景中的时候。它不像适应性模板阴影一样敏感，也没有适应性模板那样精确。
		3、适应性模板阴影（Additive Stencil Shadows）（Ogre::SHADOWTYPE_STENCIL_ADDITIVE）-这个技术把每一条光线当做场景中一条独立的的路径。这在图形卡上实现非常困难，因为在渲染场景的时候每一条额外的光线需要一条额外的通路。
		
	OGRE不支持软阴影作为引擎的一部分。如果你想要软阴影，你需要写你自己的顶点和段程序。注意这里只是一个简短的介绍(http://www.ogre3d.org/docs/manual/manual_70.html).
	
	在OGRE中使用阴影
	-------------------------------------------------------------------------------------------------------------------------
		在OGRE中使用阴影相对来说比较简单。场景管理器类有一个 setShadowTechnique成员函数，我们可以用它来设置我们想要的阴影类型。当你创建了一个实体，你可以调用setCastShadows函数去设置实体是否产生阴影。
		我们现在把环境光设为完全黑暗并设定阴影类型，找到BasicTutorial2::createScene成员函数，添加以下代码：
		mSceneMgr->setAmbientLight(Ogre::ColourValue(0, 0, 0));
		mSceneMgr->setShadowTechnique(Ogre::SHADOWTYPE_STENCIL_ADDITIVE);
		现在场景管理器使用的是适应性模板阴影，让我们在场景中创建一个对象并让它投射阴影：
		Ogre::Entity* entNinja = mSceneMgr->createEntity("Ninja", "ninja.mesh");
		entNinja->setCastShadows(true);
		mSceneMgr->getRootSceneNode()->createChildSceneNode()->attachObject(entNinja);
		
		我们同样需要一些忍者可以站在上面的物体（这样的话我们才可以让阴影投射到它上面）。我们可以创建一个简单的平面让忍者站在上面。这并不意味着本教程是叫你如何使用MeshManager的，因为我们要创建一个平面，我们将会把它最基本的东西过一遍。首先我们需要定义一个平面，定义一个平面需要提供法向量和它离原点的距离。例如我们可以使用平面组成世界几何的一部分，在这种情况下，我们需要指定离元低昂的距离而不是0。但是现在我们只需要一个以y轴正方向为法向量和离远点距离为0的平面：
		Ogre::Plane plane(Ogre::Vector3::UNIT_Y, 0);
		为了让我们的程序可以使用这个平面，我们需要注册这个平面。MeshManager记录了所有的已经加载了的网格模型（例如，我们的程序记录了我们使用过的ogrehead.mesh和ninja.mesh）。createPlane成员函数接受一个平面的定义,从参数中生成网格。我们使用下面的代码来注册平面：
		Ogre::MeshManager::getSingleton().createPlane("ground", Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,
    plane, 1500, 1500, 20, 20, true, 1, 5, 5, Ogre::Vector3::UNIT_Z);
    	在说一遍，我们不会深入介绍怎么使用MeshManager（如果你想准确的了解每一个参数的作用，请参考API）。我们创建了一个基本的1500*1500的平面，新的网格名称为"ground"。现在我们为网格创建实体并把它放到场景中。
    	Ogre::Entity* entGround = mSceneMgr->createEntity("GroundEntity", "ground");
		mSceneMgr->getRootSceneNode()->createChildSceneNode()->attachObject(entGround);
		
		干净吧？在我们完成我们的ground之前，我们还有两件事情要做。第一件事就是我们要告诉场景管理器我们不想让它投射阴影，因为它是用来被投射阴影的（其他物体的阴影投射到它上面）。第二个事情就是我们需要在它上面放一个纹理。我们的忍者网格模型已经有了一个已经定义好的材质脚本。当我们手动的创建我们的ground模型时，我们没有指定它要使用的纹理。我们将要使用"Examples/Rockwall"材质脚本，这个脚本包含在OGRE的样本中：
		entGround->setMaterialName("Examples/Rockwall");
		entGround->setCastShadows(false);
		
		下面是我们的createScene函数现在看起来的样子：
		---------------------------------------------createScene-------------------------------------------------------------
		void BasicTutorial2::createScene(void)
		{
		    mSceneMgr->setAmbientLight(Ogre::ColourValue(0, 0, 0));
		    mSceneMgr->setShadowTechnique(Ogre::SHADOWTYPE_STENCIL_ADDITIVE);
		 
		    Ogre::Entity* entNinja = mSceneMgr->createEntity("Ninja", "ninja.mesh");
		    entNinja->setCastShadows(true);
		    mSceneMgr->getRootSceneNode()->createChildSceneNode()->attachObject(entNinja);
		 
		    Ogre::Plane plane(Ogre::Vector3::UNIT_Y, 0);
		 
		    Ogre::MeshManager::getSingleton().createPlane("ground", Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,
		        plane, 1500, 1500, 20, 20, true, 1, 5, 5, Ogre::Vector3::UNIT_Z);
		 
		    Ogre::Entity* entGround = mSceneMgr->createEntity("GroundEntity", "ground");
		    mSceneMgr->getRootSceneNode()->createChildSceneNode()->attachObject(entGround);
		 
		    entGround->setMaterialName("Examples/Rockwall");
		    entGround->setCastShadows(false);
		 
		}
		--------------------------------------------end of createScene------------------------------------------------------
		现在我们在场景中有了一个忍者和一个地面，让我们编译和运行我们的程序吧。我们什么都没有看到...！发生了什么？在前面的教程中我们添加实体，然后它们显示的很好。忍者没有显示出来的原因是场景的环境光被设置为完全黑暗。因此让我们添加光线，看看发生了什么。
		
	光线的类型
	-------------------------------------------------------------------------------------------------------------------------
		OGRE提供了3种光源：
		1、点光源（Ogre::Light::LT_POINT）-点光源向周围均匀的发生光线。
		2、聚光灯（Ogre::Light::LT_SPOTLIGHT）-聚光灯和手电筒工作的原理类似，光源有一个开始的位置，然后又一个朝向。你可以光源的内环和外环设定光源的角度的大小。
		3、方向光源（Ogre::Light::LT_DIRECTIONAL）-方向光源模拟从一个方向过来的照射在场景中每一个物体的光源。假设你有你有一个晚上的场景，你想去模拟月光。你可以设定环境光来做到，但是这不是完全真实的，因为月光不是完全均匀的照射到场景中的每一个物体的（阳光也不是）。一种模拟月光的方法是：设定一个方向光源，并将光源的方向指定为月光的照射方向。
		
		Lights有很多的属性来描述光源的样子。一个光源两个最重要的属性是：漫反射和镜面反射的颜色。每个材质脚本都定义了反射多少漫反射和镜面反射光线，在后面的教程中我们将会学习如何控制材质的漫反射和镜面反射。
	
	创建光源
	------------------------------------------------------------------------------------------------------------------------
		在OGRE中我们调用场景管理器的createLight成员函数并提供光源的名称来创建一个光源，这和我们创建实体和相机的过程很像。在我们创建了一个光源之后我们可以手动的设定光源的位置或将它设定到场景节点中。和相机对象不同，光源对象只有setPositon和setDirection函数（没有像translate、pitch、yaw和roll等一套用于移动操作的函数）。因此，如果你想创建一个固定光源，你应该调用setPostion成员函数。如果你想要移动光源（例如创建一个跟随角色的光源），你应该将它附加到一个场景节点上。
		让我们以最基本的点光源开始。我们首先创建一个光源、设置它的类型和位置。
		Ogre::Light* pointLight = mSceneMgr->createLight("pointLight");
	    pointLight->setType(Ogre::Light::LT_POINT);
	    pointLight->setPosition(Ogre::Vector3(0, 150, 250));
	    
	    既然我们已经创建好了光源，我们可以设定 光源的漫反射颜色和镜面反射颜色。我们将它设置为红色：
	    pointLight->setDiffuseColour(1.0, 0.0, 0.0);
    	pointLight->setSpecularColour(1.0, 0.0, 0.0);
    	
    	现在编译和运行你的程序，成功！我们现在可以看到一个忍者和它投射了的阴影。确保你是从前面看忍者的，这样你可以看到一个完全的轮廓。有一个你需要注意的事情就是你并没哟看到光源。你看到光线产生了，但是没有看到实际的光源对象。许多OGRE教程通过添加一个简单的实体来显示光源的发射的位置。如果你对你的程序中的光源问题有些问题，你应该考虑像他们一样创建一些物体，这样你就可以准确的知道你的光源的位置。
    	
    	下面，让我们尝试一下我们的方向光源。注意到你的忍者的前面是如何上升回旋（pitch back）的吗？让我们添加少量的照射到忍者前面的黄色的方向光源。我们可以像点光源一样创建光源和设定光源的颜色：
    	Ogre::Light* directionalLight = mSceneMgr->createLight("directionalLight");
	    directionalLight->setType(Ogre::Light::LT_DIRECTIONAL);
	    directionalLight->setDiffuseColour(Ogre::ColourValue(.25, .25, 0));
	    directionalLight->setSpecularColour(Ogre::ColourValue(.25, .25, 0));
	    因为方向光源被认为是来自遥远的距离，因此我们只需要设置它的方向，不需要设置它的位置。我们将方向设定为正Z轴和负y轴方向（光线像是来自忍者前面上面45度）。
	    directionalLight->setDirection(Ogre::Vector3( 0, -1, 1 ));
	    编译并运行这个程序，我们现在在场景中可以看到2个阴影。由于方向光源比较微弱，所以它产生的阴影也比较微弱。我们最后要演示的一种光源是聚光灯。我们将创建一个蓝色的聚光灯：
	    Ogre::Light* spotLight = mSceneMgr->createLight("spotLight");
	    spotLight->setType(Ogre::Light::LT_SPOTLIGHT);
	    spotLight->setDiffuseColour(0, 0, 1.0);
	    spotLight->setSpecularColour(0, 0, 1.0);
	    我们同样需要给聚光灯光源设置位置和光源照射的方向。我们将会创建一个在忍者的右肩膀上盘旋，直接向下照射到他的聚光灯光源：
	    spotLight->setDirection(-1, -1, 0);
	 	spotLight->setPosition(Ogre::Vector3(300, 300, 0));
	 	聚光灯光源同样允许我们指定光束的宽度（想象一下手电筒光束的宽度）。聚光灯光源的中心有一个核心的光束比其他的光束要亮。我们可以通过调用setSpotlightRange成员函数来设定这些光束的宽度：
	 	spotLight->setSpotlightRange(Ogre::Degree(35), Ogre::Degree(50));
	 	
	 	编译并运行程序。紫色的忍者...危险！！！
	 	
	 	现在我们的createScene函数看起来应该像下面这个样子：
	 	void BasicTutorial2::createScene(void)
		{
		    mSceneMgr->setAmbientLight(Ogre::ColourValue(0, 0, 0));
		    mSceneMgr->setShadowTechnique(Ogre::SHADOWTYPE_STENCIL_ADDITIVE);
		 
		    Ogre::Entity* entNinja = mSceneMgr->createEntity("Ninja", "ninja.mesh");
		    entNinja->setCastShadows(true);
		    mSceneMgr->getRootSceneNode()->createChildSceneNode()->attachObject(entNinja);
		 
		    Ogre::Plane plane(Ogre::Vector3::UNIT_Y, 0);
		 
		    Ogre::MeshManager::getSingleton().createPlane("ground", Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME,
		        plane, 1500, 1500, 20, 20, true, 1, 5, 5, Ogre::Vector3::UNIT_Z);
		 
		    Ogre::Entity* entGround = mSceneMgr->createEntity("GroundEntity", "ground");
		    mSceneMgr->getRootSceneNode()->createChildSceneNode()->attachObject(entGround);
		 
		    entGround->setMaterialName("Examples/Rockwall");
		    entGround->setCastShadows(false);
		 
		    Ogre::Light* pointLight = mSceneMgr->createLight("pointLight");
		    pointLight->setType(Ogre::Light::LT_POINT);
		    pointLight->setPosition(Ogre::Vector3(0, 150, 250));
		 
		    pointLight->setDiffuseColour(1.0, 0.0, 0.0);
		    pointLight->setSpecularColour(1.0, 0.0, 0.0);
		 
		    Ogre::Light* directionalLight = mSceneMgr->createLight("directionalLight");
		    directionalLight->setType(Ogre::Light::LT_DIRECTIONAL);
		    directionalLight->setDiffuseColour(Ogre::ColourValue(.25, .25, 0));
		    directionalLight->setSpecularColour(Ogre::ColourValue(.25, .25, 0));
		 
		    directionalLight->setDirection(Ogre::Vector3( 0, -1, 1 )); 
		 
		    Ogre::Light* spotLight = mSceneMgr->createLight("spotLight");
		    spotLight->setType(Ogre::Light::LT_SPOTLIGHT);
		    spotLight->setDiffuseColour(0, 0, 1.0);
		    spotLight->setSpecularColour(0, 0, 1.0);
		 
		    spotLight->setDirection(-1, -1, 0);
		    spotLight->setPosition(Ogre::Vector3(300, 300, 0));
		 
		    spotLight->setSpotlightRange(Ogre::Degree(35), Ogre::Degree(50));
		}
		

你应该尝试的一些事情
—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
	不同的阴影类型
	-------------------------------------------------------------------------------------------------------------------------
		在这个demo中，我们只是将阴影的类型设定为SHADOWTYPE_STENCIL_ADDITIVE。试着将阴影类型设定为其他的两种类型并观察发生了什么。在场景管理器中同样有很多与阴影相关的函数，试着使用它们并观察函数引起的变化。
	
	光线衰减
	-------------------------------------------------------------------------------------------------------------------------
		光源类定义了setAttenuation函数，它可以让你远离光源的时候控制光源的发散。给点光源添加一个函数调用并给它设定不同的衰减值，观察它是如何影响光源的。
		
	SceneManager::setAmbientLight
	-------------------------------------------------------------------------------------------------------------------------
		试验场景管理器的setAmbientLight函数。
		
	视口背景颜色
	-------------------------------------------------------------------------------------------------------------------------
		改变createViewports函数中默认的颜色值，在这种情况下除了将它改为黑色，其他的颜色都不太合适，但是知道如何改变它还是不错的。
		
	Camera::setFarClipDistance
	-------------------------------------------------------------------------------------------------------------------------
		在createCamera函数中我们设定了近裁剪距离。添加一个setFarClipDistance函数调用去设置远裁剪距离为500，当你离开的时候看着忍者，但是模板阴影打开的时候看不到忍者。注意到了吗？
		注意：为了完成这个你需要调用mSceneMgr->setShadowUseInfiniteFarPlane(false)，并且你可能会得到一些奇怪的阴影。
		
	平面
	-------------------------------------------------------------------------------------------------------------------------
		在这个教程中我们不会讲太多关于平面的内容（它不是这篇文章的重点）。在后面的教程中我们将回顾这个主题，但是现在你应该去查createPlane（http://www.ogre3d.org/docs/api/1.9/class_ogre_1_1_mesh_manager.html#a0b9b36dd24c9288b1b0211035d951d20）函数并尝试给这个函数提供一些（不同的）输入。
		
		
总结
—————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
	现在你应该理解了相机、光源和阴影的一些基础知识。我们将会在后面的教程中更多的使用它。
	
	完整代码
	-------------------------------------------------------------------------------------------------------------------------
		如果你在创建这个教程中（的代码)的时候遇到了一些问题,去看一下源代码（http://www.ogre3d.org/tikiwiki/tiki-index.php?page=BasicTutorial2Source）并和你的代码比较一下。
		
	下一个教程
	-------------------------------------------------------------------------------------------------------------------------
		请到基础教程3（http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Basic+Tutorial+3）：地形、天空和雾。
	    
	    
	
		
		

