教程简介：在本教程中我们将要介绍OGRE最基本的一些对象的构建，它包括：场景管理器（SceneManager），场景节点（SceneNode）和实体（Entity ）对象。我们的内容不会包含很多的代码；相反的我们将注意力集中在你开始学习OGRE的一般的概念上。
  在你学习本教程的过程中你应该慢慢的向你的项目中添加代码并且观察加入的代码产生的结果。除了自己动手写代码，没有其他的方法可以让你熟悉这些概念。忍住冲动，耐心的读完吧。  

如果你在学习本教程的过程中遇到了任何问题，你应该将这个问题发布在帮助论坛（http://www.ogre3d.org/forums/viewforum.php?f=2）上。

前提条件---------------------------------------------------------------------------------------------------------------------
  本教程认为你已经知道如何使用C++语言编程并且能够设置和编译Ogre程序。
  本教程同样认为你已经使用Ogre Wiki Tutorial Framework、CMake或者Ogre Appwizard创建了一个工程。如果没有的话请看http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Setting+Up+An+Application吧。

目录―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
-----------------------------------------------------------------------------------------------------------------------------
--前提条件
--开始
----初始代码
----疑难排除
------MessageBox函数问题
------缺少配置文件或DLL
------资源或插件问题
------在Visual Studio或Code::Blocks中不能启动程序
--Ogre如何工作
----场景管理器
----实体
----场景节点
--你的第一个Ogre程序
--坐标系与向量
--添加另外一个对象
--实体更多介绍
--场景更多介绍
--应该尝试去做的
----缩放
----旋转
--Ogre环境
----DLL和插件
------Main库
------插件
------第三方库和辅助库
------测试与发布
--------例子
----配置文件
--总结
-----------------------------------------------------------------------------------------------------------------------------
―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

开始
―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
初始代码
-----------------------------------------------------------------------------------------------------------------------------
    在本教程中我们将使用之前写好的代码。除了我们将要加入createScene 函数的代码外你应该忽视所有其他的代码。我们将在后面的教程中进一步解释Ogre程序是如何运行的，但是现在我们将从最基本的部分开始。
    请阅读"setting up an application"(http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Setting+Up+An+Application)去学习如何使用你的IDE和环境创建一个初始的项目。
    创建名称为Tutorial的项目
    将教程程序框架添加到你的项目中：
    ---------------------------------
    --  BaseApplication.h          --
	--  BaseApplication.cpp        --
	--  TutorialApplication.h      --
	--  TutorialApplication.cpp    --
	---------------------------------
	你可以从Ogre Wiki Tutorial Framework(http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Ogre+Wiki+Tutorial+Framework)得到这些文件，或者使用 Ogre AppWizard(https://bitbucket.org/jacmoe/ogreappwizards/downloads)。
	TutorialApplication.cpp是我们教程将要使用的唯一一个文件，并且我们只会修改其中的createScene()成员函数。
	TutorialApplication.cpp应该包含如下的代码（为了保持整洁，移除了头文件注释）。
	---------------------------------------------------------------------------------------------------------------------
	#include "TutorialApplication.h"
 
	TutorialApplication::TutorialApplication(void)
	{
	}
 
	TutorialApplication::~TutorialApplication(void)
	{
	}
 
	//-------------------------------------------------------------------------------------
	void TutorialApplication::createScene(void)
	{
    	// Set the scene's ambient light
    	mSceneMgr->setAmbientLight(Ogre::ColourValue(0.5f, 0.5f, 0.5f));
 
    	// Create an Entity
	 	Ogre::Entity* ogreHead = mSceneMgr->createEntity("Head", "ogrehead.mesh");
 
    	// Create a SceneNode and attach the Entity to it
    	Ogre::SceneNode* headNode = mSceneMgr->getRootSceneNode()->createChildSceneNode("HeadNode");
    	headNode->attachObject(ogreHead);
 
    	// Create a Light and set its position
    	Ogre::Light* light = mSceneMgr->createLight("MainLight");
    	light->setPosition(20.0f, 80.0f, 50.0f);
	}
 
 
 
	#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
	#define WIN32_LEAN_AND_MEAN
	#include "windows.h"
	#endif
 
	#ifdef __cplusplus
	extern "C" {
	#endif
 
	#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
 		INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
	#else
    	int main(int argc, char *argv[])
	#endif
    	{
        	// Create application object
        	TutorialApplication app;
 
        	try 
        	{
        	 	app.go();
        	} catch( Ogre::Exception& e ) {
	#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            	MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR| MB_TASKMODAL);
	#else
            	std::cerr << "An exception has occured: " << e.getFullDescription().c_str() << std::endl;
	#endif
        	}
 
        	return 0;
    	}
 
	#ifdef __cplusplus
	}
	#endif
-----------------------------------------------------------------------------------------------------------------------------
	编译并运行你的程序，以保证你的环境配置是正确的。如果你的程序运行了，使用WASD健移动物体、使用鼠标看看周围。按下Esc健退出程序。
-----------------------------------------------------------------------------------------------------------------------------
	
	疑难排除
	---------------------------------------------------------------------------------------------------------------------
	如果你遇到了问题，检查Setting Up An Application(http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Setting+Up+An+Application)你的编译器是否正确的设置了，后者查看Ogre.log获取更多的详细信息。如果你需要进一步的帮助，在论坛上搜索(http://www.ogre3d.org/forums/search.php)，也许你的问题别人已经遇到过很多次了。如果这是一个新的问题，请阅读论坛规则（http://www.ogre3d.org/forums/viewtopic.php?t=11886），然后提问（http://www.ogre3d.org/forums/viewforum.php?f=2）。请确保从你的Ogre.log、异常、错误信息或者调试后的痕迹（debugger back traces）。
	注意：以后的教程将不会包含疑难排除信息，如果你遇到了问题那么请特别注意下面的部分。
	MessageBox问题----------------------------------------------------------------------------------------------------------
	如果你使用的Visual Studio并且本项目打开了Unicode支持，那么你可能会遇到下面的错误：
	------------------------------------------------------------------------------------------------------------------------
	-- error C2664: 'MessageBoxW' : cannot convert parameter 2 from 'const char *' to 'LPCWSTR'
    --      Types pointed to are unrelated; conversion requires reinterpret_cast, C-style cast or  function-style cast
    -------------------------------------------------------------------------------------------------------------------------
    产生这个问题的原因是MessageBox函数（在这个情况下）需要Unicode编码，但是我们却给它一个ANSI字符串。为了解决这个问题，将下面这一行：
    MessageBox( NULL, e.what(), "An exception has occurred!", MB_OK |   MB_IConerror  | MB_TASKMODAL);
    改为：
    MessageBoxA( NULL, e.what(), "An exception has occurred!", MB_OK |   MB_IConerror  | MB_TASKMODAL);
    或者你可以在编译器中将你的文本格式从Unicode改为ANSI。这样的话你将失去国际语言的支持。
    这样做的理由是：MessageBox将会根据项目的配置自动的解析为MessageBoxA (ANSI)或者MessageBoxW (Wide/Unicode)。我们通过显式的指定它使用ANSI来解决这个问题。
    -------------------------------------------------------------------------------------------------------------------------
    
    丢失配置文件或者DLL
    -------------------------------------------------------------------------------------------------------------------------
    	如果你试着启动刚创建的程序但是程序却抱怨（提示）丢失DLL或配置文件（*.cfg），那么你很有可能没有从OgreSDK文件夹中将它们复制过来。在Visual Studio中，当你在release模式下编译你的程序，它把release的可执行文件放在了[ProjectFolder]\bin\release文件夹中，debug的可执行文件放在了[ProjectFolder]\bin\debug 文件夹中。你必须从OgreSDK文件夹中复制所有的".dll"和".cfg"文件到正确的文件夹中。也就是从[OgreSDK]\bin\release复制到[ProjectFolder]\bin\release、[OgreSDK]\bin\debug到[ProjectFolder]\bin\debug。你同样需要编辑resources.cfg文件以指出正确的路径。下一小节将会更加详细的介绍。
    -------------------------------------------------------------------------------------------------------------------------
    
    资源或插件问题
    -------------------------------------------------------------------------------------------------------------------------
    	确保在一个相同的包含可执行文件的文件夹下有plugins.cfg和resources.cfg文件。plugins.cfg告诉OGRE有哪些渲染库是可用的（Direct3D9，OpenGL,etc）。resources.cfg是给ExampleApplication使用的，它指出了纹理、网格模型和脚本的路径。它们都是文本文件（指配置文件），所以编辑它们以保证路径是正确的。否则你的OGRE可能没有任何渲染库，或者你的屏幕或者Ogre.log将显示类似下面的错误：
    	Description: ../../Media/packs/OgreCore.zip - error whilst opening archive: Unable to read zip file
    	如果是这样的话，打开resources.cfg文件，改变它包含的位置使它指向Media文件夹中包含该资源的位置。注意：在这些路径中你不能使用诸如$(SomeVariable)之类的环境变量。
   	---------------------------------------------------------------------------------------------------------------------
   	
   	在Visual Studio或者Code::Blocks不能启动程序
   	---------------------------------------------------------------------------------------------------------------------
   	如果你使用Visual Studio或者Visual C++创建项目并且在启动的时候遇到环境问题，那么这个问题很有可能是由于debugger设置问题。如果你按下play或者Start Debugging菜单项，就会产生异常：配置文件(*.cfg)没有找到，那么工作目录(working directory)很有可能设置不正确。
   	解决这个问题没有直接的方法，而是取决于Visual C++的版本，虽然是这样但是基本的步骤是一样的。在solution explorer中的project项上点击右键转到属性页，在配置属性页应该有Debugging选项，在Debugging选项中应该有Working Directory字段，它应该被设置为你的可执行文件的位置。
   	如果你不知道应该把什么东西放在那儿，试着模仿Command字段（应该也在Debugging选项中）。例如，在Visual C++2003中，Command字段类似于“..\..\bin\$(ConfigurationName)\$(TargetFileName)”。对于工作目录（Working Directory）我们应该命令中与部分文件名有关的。。在本例，工作目录应该是这样的：..\..\bin\$(ConfigurationName)。你实际应该放在这儿的字符串取决于你使用的Visual C++的版本和你的编译环境，所在在这之前请确保对命令字段进行了检查。确保对Release和Debug都修改了工作目录。
   	在Visual C++2005中有些事情可能完全不同。我发现“..\..\bin\$(ConfigurationName)”目录作为第一个尝试是不错的主意，如果没有成功的话,那你可能要和它好好玩玩了或者去帮助论坛求救。
   	如果你使用的是Code::Blocks那么你需要做同样的事情，请右键点击project选择“Properties”，转到"Build Targets",然后改变“Execution working dir”字段，使它表示你的可执行文件目录。
   	这么做的理由是Ogre认为某些文件和可执行文件位于同一个目录，不需要将工作目录设置为这些文件所在的目录，它不会起作用的。
   	一旦你成功的运行了你的程序，那么请继续移除createScene()函数中的代码，但是不要把函数移除了，我们将把代码放在这个函数中并且逐行演示它。
   	-------------------------------------------------------------------------------------------------------------------------
   	
Ogre是如何工作的
―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
	这是一个很宽广的问题，我们将从SceneManagers开始，接着到Entities和SceneNodes，这3个类是构建Ogre程序的基础。
	
	SceneManager 基础
	-------------------------------------------------------------------------------------------------------------------------
		出现在场景中的任何东西都是有SceneManager管理的。当你将一个物体放在场景中，SceneManager是一个记录物体位置的类。当你创建Cameras去观察这个场景（这将在后面的教程中介绍），SceneManager也会记录它们（相机），SceneManager同样会记录你创建的平面、广告牌、光线等物体。
		有多重类型的SceneManager，有渲染地形的SceneManager，有渲染BSP map的SceneManager等等。在这儿(http://www.ogre3d.org/tikiwiki/tiki-index.php?page=SceneManagersFAQ)你可以看到各种类型的SceneManager，随着教程的进度，我们将会介绍更多的SceneManager。
	Entity 基础
	-------------------------------------------------------------------------------------------------------------------------
		实体（Entity）是指你可以在场景中渲染的一个物体，你可以认为实体是由3D网格表示的任何东西。一个机器人是一个实体，一条鱼		是一个实体，你的角色行走在地形上将是一个很大的实体。但是像光、广告牌、粒子相机等不是实体。
		关于Ogre需要注意的是：它将可渲染对象的位置和方向分开了。这意味着你不能直接将实体放在场景中。你应该将实体附加到场景节点（SceneNode）上，场景节点包含了位置和方向信息。
		
	SceneNode 基础
	-------------------------------------------------------------------------------------------------------------------------
   		正如上面提到的，SceneNode记录了所有附加到它上面的物体的位置和方向。只有当你将创建的实体附加到SceneNode上时，实体才会被渲染。此外SceneNode 不是在屏幕上显示的对象，只有当你创建了一个SceneNode并将一个实体附加到它上面时，它才会在屏幕上显示。
   		SceneNode上可以任意数量的对象，也就是说你有一个角色对象沿着屏幕走，你想在角色周围创建一个光源。那么你应该这样做：首先创建一个SceneNode，然后创建一个角色实体并将实体附加到SceneNode上，接着你将创建一个光源对象并将光源附加到SceneNode上。SceneNode同样可以附加到SceneNode上，这意味着你可以SceneNode可以继承SceneNode。在后面的教程中我们将介绍更多的关于SceneNode的高级应用。
   		关于SceneNode一个很重要的概念需要注意：SceneNode的位置通常是相对于父SceneNode的，每个SceneManager都有一个根节点，所有其他的SceneNode都可以附加到它上面。
   	-------------------------------------------------------------------------------------------------------------------------
   	
  你的第一个Ogre程序
  ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
  	现在回到我们之前创建的代码。找到TutorialApplication::createScene成员函数，在本教程中，我们只会修改这个函数的内容。为了能看到我们做了什么，我们首先需要做的是给场景添加环境光。我们通过SceneManager::setAmbientLight函数并指定我们想要的颜色来创建环境光。注意：ColourValue的构造函数需要红、绿、蓝三种颜色，颜色值的范围为0-1，在createScene中加入下面这行：
  	mSceneMgr->setAmbientLight(Ogre::ColourValue(0.5f, 0.5f, 0.5f));
  	接下来我们要做的是创建一个实体，我们通过调用SceneManager的createEntity成员函数来创建一个实体。
  	Ogre::Entity* ogreHead = mSceneMgr->createEntity("Head", "ogrehead.mesh");
  	好了，有几个问题出现了：
  		（1）mSceneMgr从哪儿来的？
  		（2）我们调用的函数的参数是什么？
  	    mSceneMgr变量包含了当前的SceneManager对象。就目前而言，这是由BaseApplication完成的。
  	    createEntity接受2个参数：
  		（1）我们创建的实体的名称，名称作为字符串传入（这里名称为"Head"），所有的实体都必须有唯一的名称。如果你创建了两个相同名称的实体那么你会遇到错误。
  		（2）实体用到的网格（这里我们将它指定为“ogrehead.mesh”）。
  		教程资源
  		---------------------------------------------------------------------------------------------------------------------
  		“ogrehead.mesh”是一个来自Ogre SDK的资源。后面的教程将会包含资源加载的过程，但是现在我们使用BaseApplication类来加载资源
  		--------------------------------------------------------------------------------------------------------------------
  		
  		既然我们已经创建了一个实体，我们也需要创建一个SceneNode，将实体附加到它上面。由于SceneManager类有一个根SceneNode，所以我们只需要创建根节点的子节点就可以了。
  		Ogre::SceneNode* headNode = mSceneMgr->getRootSceneNode()->createChildSceneNode("HeadNode");
  		这个很长的声明首先调用当前SceneManager的getRootSceneNode函数得到场景管理器的根节点（场景节点），然后调用根节点的createChildSceneNode函数。createChildSceneNode函数的参数是我们创建的场景节点的名称。像实体类一样，任何两个相同的SceneNode不能有相同的名称。
  		接下来，为了Ogre Head有一个渲染位置，我们将实体附加到场景节点（SceneNode）上：
  		headNode->attachObject(ogreHead);
  		尽管我们知道下个教程才会详细的介绍光源，为了能正确的看到我们的模型的阴影而不是由环境光产生的平面阴影。我们同样给我们创建的光源一个唯一的名称。
  		Ogre::Light* light = mSceneMgr->createLight( "MainLight" );
  		一旦光源（Light）被创建了，那么使用它的成员函数“setPosition”就可以设置它的位置，它的三个参数X、Y、Z是要设置的新的位置的坐标，我们将在下面更加详细的介绍介绍坐标。
  		light->setPosition(20, 80, 50);
  		就这样，编译并运行你的程序，你应该可以在的屏幕上看到一个Ogre头。
  		
  坐标与向量
  ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
    在我们进行深入介绍之前，我们需要讲一下屏幕坐标和Ogre向量（Vector）对象。Ogre（其他的很多图像引擎也是类似）使用X、Z轴作为水平面，Y轴作为垂直轴。当你现在看着你的显示器的时候，X轴从显示器的左边到右边，右边是X的正方向。Y轴从你的显示器的底部到顶部，顶部为正方向。Z轴从显示器的里面指向外面，指向外面的为正方向。
    注意Ogre Head是如何沿着Z轴朝向我们的？这很有可能是网格（mesh）和相机（camera）的位置和朝向属性。我们将在后面的教程中介绍相机（camera），但是现在我们需要认识到Ogre Head位于（0,0,0）处，并且我们从前面看它。头部的朝向是由美工创建和保存网格时的朝向决定的。Ogre关于你的模型朝向不做假设。你加载的每个网格模型可能有不同的初始化朝向。
    Ogre使用向量类去表示位置与方向（Ogre中没有Point类）。Ogre定义了2维(Vector2)、3维(Vector3)、4维向量(Vector4)，其中3维向量是使用的最多的。如果你对向量不熟悉，那么在你学习Ogre系列教材之前你应该去这儿看看（http://www.wildbunny.co.uk/blog/vector-maths-a-primer-for-games-programmers/）。如果你从事复杂的项目，那么理解向量背后的数学知识是非常有用的。
    
 再添加一个对象
 ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
 	既然你已经理解了坐标系统的工作原理，我们就可以回到我们的代码。在我们写下的三行代码中，我们没有在任何地方指出Ogre Head的位置。Ogre中有大量的函数已经为你设定了默认的参数。例如SceneNode::createChildSceneNode成员函数有3个参数：场景节点的名称、场景节点的位置和场景节点朝向的初始旋转角度（方向）。正如你所看到的，位置被设为（0,0,0）。让我们创建另外一个节点，但是这次我们将指定起始位置而不是原点去做点事情。
 	Ogre::Entity* ogreHead2 = mSceneMgr->createEntity( "Head2", "ogrehead.mesh" );
	Ogre::SceneNode* headNode2 = mSceneMgr->getRootSceneNode()->createChildSceneNode( "HeadNode2", Ogre::Vector3( 100, 0, 0 ) );
	headNode2->attachObject( ogreHead2 );
	
	这看起来和我们之前做的一样，但是有两处例外。首先，我们给实体和场景节点的命名有一点区别。第二，我们将实体的起始位置设为沿着x方向离根场景节点100单位处（记住：所有的场景节点的位置都是相对于其父节点的）。编译并运行这个程序，现在有2个并排的Ogre Head。你可能需要使用s键或者Down方向键向后移动才能看到2个Ogre Head。
	
深入了解实体（Entity）
―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
	实体（Entity）类非常广泛，对于我们开始学习来说，我们不需要包含了解这个对象每一个部分。但是现在指出在Entity类中几个有用的成员函数。
	第一个是Entity::setVisible和Entity::isVisible。通过简单的调用这个函数设置实体是否可见。如果你需要隐藏一个实体，但是之后显示它，那么应该调用这个函数而不是摧毁对象之后再创建它。
	在实体上你不需要“实体池”。任何对象的网格模型和纹理只有一份会被载入内存中，因此你不需要花费时间去自己保存它。你唯一需要花时间的是对象的构造和析构，这相对来说代价比较小。
	 getName函数返回实体的名称， getParentSceneNode函数返回实体附于的节点。
	 
深入了解场景节点（SceneNode）
―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
    SceneNode类非常复杂，一个SceneNode有很多事情需要处理，因此我们只介绍几个最有用的方法。
    你可以通过调用getPosition和setPosition函数设定场景节点的位置（相对于父场景节点）。你可以调用translate函数移动对象的位置（相对于当前的位置）。
    SceneNode不仅能设定位置，还能管理对象的缩放和旋转。你可以通过scale函数来缩放对象。你可以使用pitch、yaw和roll函数旋转对象。你可以使用resetOrientation函数重置对于对象的旋转。你也可以使用setOrientation、getOrientation和rotate函数完成更复杂的旋转操作。我们要到比较后面的教程才会涉及四元数（Quaternion）。
    你已经见过了 attachObject函数，如果你想操作附加到场景节点上的对象，那么相关的函数是很有用的：numAttachedObjects、getAttachedObject（这个函数都有多个版本） 、detachObject（同样有多个版本） 、detachAllObjects。同样有一整套函数处理父场景节点和子场景节点。
    因为位置和平移都是相对于父场景节点的，我们可以很容易的让两个节点一起移动。我们的程序的当前代码如下：
    -------------------------------------------------------------------------------------------------------------------------
    mSceneMgr->setAmbientLight(Ogre::ColourValue(1.0, 1.0, 1.0));
 
    Ogre::Entity* ogreHead = mSceneMgr->createEntity("Head", "ogrehead.mesh");
    Ogre::SceneNode* headNode = mSceneMgr->getRootSceneNode()->createChildSceneNode("HeadNode");
    headNode->attachObject(ogreHead);
 
    Ogre::Entity* ogreHead2 = mSceneMgr->createEntity( "Head2", "ogrehead.mesh" );
    Ogre::SceneNode* headNode2 = mSceneMgr->getRootSceneNode()->createChildSceneNode( "HeadNode2", Ogre::Vector3( 100, 0, 0 ) );
    headNode2->attachObject( ogreHead2 );
    -------------------------------------------------------------------------------------------------------------------------
    如果我们将第6行从：
    Ogre::SceneNode* headNode2 = mSceneMgr->getRootSceneNode()->createChildSceneNode( "HeadNode2", Ogre::Vector3( 100, 0, 0 ) );
    改为：
    Ogre::SceneNode* headNode2 = headNode->createChildSceneNode( "HeadNode2", Ogre::Vector3( 100, 0, 0 ) );
    
    那么我们将headNode2变为headNode的孩子。移动headNode也会移动headNode2，但是移动headNode2不会影响headNode。例如下面的代码将会只移动headNode2：
    headNode2->translate( Ogre::Vector3( 10, 0, 10 ) );
    下面的代码将会移动headNode，因为headNode2是headNode的孩子，所以headNode2也会被移动。
    headNode->translate( Ogre::Vector3( 25, 0, 0 ) );
    如果你对于这有疑问，最简单的的就是从根场景节点开始然后往下。开始时headNode位于（0,0,0），接着让它移动（25,0,0），headNode相对于它的父节点的位置为（25,0,0）。headNode2的起始位置为（100,0,0），我们让它移动（10,0,10），因此它的新位置相对于它的父节点为（110,0,10）
    现在让我们指出实际情况是怎么回事。从根场景节点开始，它的位置总是（0,0,0）。现在headNode的位置为（root + headNode）:(0,0,0) + (25,0,0) = (25,0,0)。没什么奇怪的。
    headNode2是headNode的子节点，因此它的位置为（root + headNode + headNode2）:(0,0,0) + (25,0,0) + (110,0,10) = (135,0,10).
    这只是一个解释如何理解场景节点的位置继承的例子。你很少需要计算你的节点的绝对位置。最后，注意你可以通过名称调用场景管理器的getSceneNode和getEntity函数得到场景节点和实体，所以你不需要一个指针指向你创建的每一个场景节点。尽管如此，你也应该把那些经常使用的对象记录下来。
    
    应该尝试做的事
    ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
    现在你应该对实体、场景节点和场景管理器有一个基本的掌握。我们建议从上面的节点开始从场景中添加或者移除Ogre head。如果你已经完成了，清除createScene方法中的所有代码，和下面的每个代码段一起玩耍吧。
    
    缩放
    -------------------------------------------------------------------------------------------------------------------------
    你可以调用场景节点的scale方法对网格模型进行缩放。尝试改变scale函数中的值，看看会发生什么：
    -------------------------------------------------------------------------------------------------------------------------
    mSceneMgr->setAmbientLight(Ogre::ColourValue(1.0, 1.0, 1.0));
 
    Ogre::Entity* ogreHead = mSceneMgr->createEntity("Head", "ogrehead.mesh");
    Ogre::SceneNode* headNode = mSceneMgr->getRootSceneNode()->createChildSceneNode("HeadNode");
    headNode->attachObject(ogreHead);
 
    headNode->scale( .5, 1, 2 ); 
 
    Ogre::Entity* ogreHead2 = mSceneMgr->createEntity( "Head2", "ogrehead.mesh" );
    Ogre::SceneNode* headNode2 = mSceneMgr->getRootSceneNode()->createChildSceneNode( "HeadNode2", Ogre::Vector3( 100, 0, 0 ) );
    headNode2->attachObject( ogreHead2 );
    -------------------------------------------------------------------------------------------------------------------------
    
    旋转
    -------------------------------------------------------------------------------------------------------------------------
    你可以通过yaw、pitch和roll函数旋转对象，参数可以为Degree(角度)或者Radian(弧度)。Pitch函数绕x轴旋转,yaw绕y轴旋转、roll绕z轴旋转。伸出你的右手，将你的大拇指指向轴的方向，弯曲剩下的手指，手指弯曲的放线就是沿该轴旋转的正方向。
    请尝试改变角度并组合多种转换方式：
    ---------------------------------------------------code start------------------------------------------------------------
    mSceneMgr->setAmbientLight(Ogre::ColourValue(1.0, 1.0, 1.0));
 
    Ogre::Entity* ogreHead = mSceneMgr->createEntity("Head", "ogrehead.mesh");
    Ogre::SceneNode* headNode = mSceneMgr->getRootSceneNode()->createChildSceneNode("HeadNode");
    headNode->attachObject(ogreHead);
 
    headNode->yaw( Ogre::Degree( -90 ) );
 
    Ogre::Entity* ogreHead2 = mSceneMgr->createEntity( "Head2", "ogrehead.mesh" );
    Ogre::SceneNode* headNode2 = mSceneMgr->getRootSceneNode()->createChildSceneNode( "HeadNode2", Ogre::Vector3( 100, 0, 0 ) );
    headNode2->attachObject( ogreHead2 );
 
    headNode2->pitch( Ogre::Degree( -90 ) );
 
    Ogre::Entity* ogreHead3 = mSceneMgr->createEntity( "Head3", "ogrehead.mesh" );
    Ogre::SceneNode* headNode3 = mSceneMgr->getRootSceneNode()->createChildSceneNode( "HeadNode3", Ogre::Vector3( 200, 0, 0 ) );
    headNode3->attachObject( ogreHead3 );
 
    headNode3->roll( Ogre::Degree( -90 ) );
 
    headNode2->scale( 1, 2, 1 );
    --------------------------------------------------code end---------------------------------------------------------------
    在Microsoft Visual Studio 2010可能会产生错误：Degree是一个未声明的标示符。可以通过调用Ogre::Degree来解决。
    
    Ogre环境
    ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
        本节中（整个教程）提到的大部分文件（.DLL,.CFG）都可以再OgreSDK的bin文件夹中的debug或release子文件夹中找到。Debug程序    应该使用OgreSDK中的debug文件夹，Release程序应该使用OgreSDK中的release文件夹。
        
        Windows,Linux和OSX
        本小节中大量使用Windows的名称。相同的信息基本可以应用在Linux和Mac OS X,但是有些事情可能有点细微的差异，例如共享库一.so结尾放在可以替换的位置（没看懂）。如果你有问题，将你的问题发布到论坛上（http://www.ogre3d.org/forums/viewforum.php?f=2）。
        
        DLL和插件
        ---------------------------------------------------------------------------------------------------------------------
            既然我们要用到Ogre环境。我将大致的解释一下Ogre库是如何工作的，它将有助于你的工作。
            Ogre分为3个大的共享库组：main library,plugins和third-party libraries。
            
            Main library
            -----------------------------------------------------------------------------------------------------------------
            第一组库包含库自身和它所依赖的共享库。Ogre库完全包含在Ogre.dll中，这个dll需要几个其他的库，比如cg.dll。每个Ogre程序都要包含这些库。
            
            plugins(插件)
            -----------------------------------------------------------------------------------------------------------------
            第二种共享库就是插件。Ogre把功能的一部分放到共享库中，这样你就可以根据你的程序的需要打开或者关闭某些功能。Ogre中包含的最基本的库的名称是以Plugin_开头的。如果你的程序需要，你可以自己构造插件，但是我们的教程不会介绍这个。
            Ogre的渲染系统同样适用插件（比如OpenGL、DirectX等），这些插件的名称以“RenderSystem_”开头。这是由于这些插件的存在，你可以从你的程序中添加或者移除渲染系统。它会非常有用，如果你写着色器或者其他的具体到OpenGL（或者其他的渲染系统）东西并且你需要禁止程序在DirectX上运行。通过简单的移除渲染系统插件就可以使它变的不可用。另外，如果你工作在一个非标准的平台上，你可以写你自己的渲染系统插件。尽管本教程不会讲如何写自己的插件，但是在下一小节我们将介绍如何移除插件。
            
            第三方库和辅助库（Third party libraries and helper libraries）
            -----------------------------------------------------------------------------------------------------------------
            第三组共享库是第三方库和一些辅助库。Ogre只是一个图像渲染库，它不包含GUI系统、输入系统、物理引擎等。你不得不使用其他的库来完成这些事情。
            Ogre例子和SDK包含几个三方库和辅助库：
            	（1）通过OIS库完成键盘和鼠标的输入。这包含在OIS.dll
            	（2）CgProgramManager使用的Cg库包含在Cg.dll中。
            也有一些不包含在SDK中的库提供了更多的功能（比如声音和物理模型），你可以在其他地方比如wiki或者论坛了解到关于它们的更多信息。
            
            测试 VS 发布（testing vs Release）
            当你在本地测试你的程序的时候，你应该打开所有的功能（也就是不要移除任何东西），因为测试文件的大小通常是不重要的。当你想发布你的程序的时候，你应该在Release模式编译你的程序并且只包含哪些需要发布的插件。
            例子
            如果你的程序没有使用Cg ProgramManager但是使用了OIS，那么你不应该为包含Cg和CgProgramManager DLL,但是你必须包含OIS DLL，否则你的程序将不能运行。
            
        
        配置文件
        ---------------------------------------------------------------------------------------------------------------------
        Ogre的运行需要几个配置文件，它们控制那些插件需要被加载、程序的资源的位置等息息。我们将简单的看一下每个配置文件是做什么的。如果你有更具体的问题，那么你应该在Ogre帮助论坛上提出来。
        plugins.cfg：这个配置文件包含了你的程序将要用到的插件。如果你想在你的程序中添加或者移除插件，你需要修改这个配置文件。你可以通过删除配置文件中正确的行或者在这行开始的地方添加一个“#”注释掉这行来移除插件；你可以通过添加像“Plugin=[PluginName]”的一行来添加插件。注意：不要把.DLL放在插件名称的结尾处，你的插件也没有必要以“RenderSystem_”和“Plugin_”开头。你也可以通过修改PluginFolder变量决定Ogre去哪儿寻找插件。你可以使用绝对和相对路径，但是不能使用类似于$(SomeVariable的环境变量)。
        resources.cfg：这个文件包含了Ogre应该去扫描查找资源的一系列文件夹。资源包括脚本、网格模型和纹理等。你可以使用绝对和相对路径，但是不能使用类似于$(SomeVariable的环境变量)。注意：Ogre不会扫描子文件夹，因此如果你的文件夹有多层，你应该手动的进入。举个例子，如果你有一个类似于“res\meshes”和“res\meshes\small”的目录树，你不得不添加两个入口去访问这些路径下面包含的文件。
        media.cfg：这个文件告诉Ogre关于某些资源的更多信息。它不像我们现在需要修改的文件，所以我们跳过细节。你可以在手册和论坛找到更多的信息。
        ogre.cfg：这个文件是由Ogre配置屏幕产生的。这个文件指出了你的个人电脑和图像设置。当你分享你的程序的时候你不应该将这个文件发布给别人，因为别人可能和你的设置不同。注意，你不应该直接编辑这个文件，而是应该通过配置屏幕。
        quake3settings.cfg：这个文件和BSPSceneManager一起使用。除非你使用场景管理器，否则你是不需要这个文件的。除非你使用BSPSceneManager否则你不应该将这个文件和你的程序一起发布。即使这样它很有可能完全不同，这取决于你的程序的需要。
        上面这些是Ogre直接操作的配置文件。Ogre必须能够找到"plugins.cfg"、"resources.cfg"和"media.cfg"才能正确运行。在后面的教程中我们将介绍更多的文件以及如何改变它们的位置和操作它们来完成更高级的事情。
       
    
    总结
    ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
    到现在你应该基本掌握了SceneManager、SceneNode和Entity类，你不需要对我们介绍的所有函数都熟悉。它们都是最基本的对象，我们将会很频繁的使用它们。通过后面几个教程的学习你将会更加熟悉它们。
    你也应该熟悉如何给你的项目配置Ogre工作环境。
    
    到 Basic Tutorial 2（http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Basic+Tutorial+2）去学习相机、光线和阴影的相关知识吧。
            
